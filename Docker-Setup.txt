# Docker Setup Instructions for Call Prediction App

## Project Structure
Your project should have these files in the root directory:
- Dockerfile
- docker-compose.yml
- wait-for-it.sh
- requirements.txt (for Python dependencies)
- initialize-database.sql (optional)

## Step 1: Create Dockerfile
Create a file named `Dockerfile` with the following content:

```dockerfile
# Stage 1: Build Java Spring Boot app
FROM maven:3.9-eclipse-temurin-21 AS builder
WORKDIR /app
COPY . .
RUN mvn clean package -DskipTests

# Stage 2: Runtime
FROM eclipse-temurin:21-jre-jammy

# --- Install system dependencies ---
RUN apt-get update && \
    apt-get install -y python3-venv python3-pip mysql-client && \
    apt-get clean

# Set environment variables
ENV JAVA_HOME=/opt/java/openjdk

# --- Create virtual environment ---
WORKDIR /app
RUN python3 -m venv /app/venv

# Activate venv and install Python packages
COPY requirements.txt .
RUN . /app/venv/bin/activate && pip install --upgrade pip && pip install -r requirements.txt

# Copy startup script
COPY wait-for-it.sh /wait-for-it.sh
RUN chmod +x /wait-for-it.sh

# --- Copy application files ---
COPY --from=builder /app/target/*.jar app.jar
COPY src/python/ src/python/
COPY src/output/ src/output/

# Set entrypoint and expose app port
EXPOSE 8080
# Use the wait-for-it script to ensure MySQL is ready before starting the app
ENTRYPOINT ["/wait-for-it.sh", "db", "3306", "java", "-jar", "app.jar"]
```

## Step 2: Create docker-compose.yml
Create a file named `docker-compose.yml` with the following content:

```yaml
services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_APPLICATION_NAME=CallPrediction-Backend
      - SPRING_DATASOURCE_URL=jdbc:mysql://db:3306/calls_prediction?useSSL=false&allowPublicKeyRetrieval=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=Mike2000
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=com.mysql.cj.jdbc.Driver
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      - SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT=org.hibernate.dialect.MySQL8Dialect
      - SPRING_DATASOURCE_INITIALIZATION_MODE=always
      - SPRING_DATASOURCE_HIKARI_INITIALIZATION_FAIL_TIMEOUT=60000
    restart: on-failure
    depends_on:
      - db
    networks:
      - app-network

  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    environment:
      - MYSQL_DATABASE=calls_prediction
      - MYSQL_ROOT_PASSWORD=Mike2000
    ports:
      - "3307:3306"  # Using 3307 on host to avoid conflicts with local MySQL
    volumes:
      - mysql-data:/var/lib/mysql
    restart: always
    networks:
      - app-network

volumes:
  mysql-data:

networks:
  app-network:
```

## Step 3: Create wait-for-it.sh script
This script ensures the database is ready before starting the application.

```bash
#!/bin/bash
# wait-for-it.sh script to wait for the database to be ready

set -e

host="$1"
port="$2"
shift 2
cmd="$@"

until mysqladmin ping -h"$host" -P"$port" -u"root" -p"Mike2000" --silent; do
  >&2 echo "MySQL is unavailable - sleeping"
  sleep 1
done

>&2 echo "MySQL is up - executing command"
exec $cmd
```

## Step 4: Make the script executable
```bash
chmod +x wait-for-it.sh
```

## Step 5: Create initialize-database.sql (Optional)
```sql
-- Create database if it doesn't exist
CREATE DATABASE IF NOT EXISTS calls_prediction;

-- Use the database
USE calls_prediction;

-- You can add any initial tables or data here if needed
```

## Step 6: Update application.properties
Make sure your Spring Boot application.properties file includes these settings:

```properties
spring.application.name=CallPrediction-Backend

# Database Configuration
spring.datasource.url=jdbc:mysql://db:3306/calls_prediction?useSSL=false&allowPublicKeyRetrieval=true
spring.datasource.username=root
spring.datasource.password=Mike2000
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# JPA / Hibernate Configuration
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
spring.jpa.show-sql=true

# Connection Pool Configuration
spring.datasource.hikari.connection-timeout=60000
spring.datasource.hikari.maximum-pool-size=5
spring.datasource.hikari.minimum-idle=2

# Server Configuration
server.port=8080
```

## Step 7: Build and Run the Application
```bash
# Stop any existing containers
docker-compose down

# Build the containers
docker-compose build

# Start the containers in detached mode
docker-compose up -d

# View logs
docker-compose logs -f
```

## Step 8: Accessing the Application
- Web Application: http://localhost:8080
- MySQL Database (from host):
  ```bash
  mysql -h127.0.0.1 -P3307 -uroot -pMike2000
  ```

## Step 9: Common Docker Commands

### Container Management
```bash
# List running containers
docker-compose ps

# Stop all containers
docker-compose down

# Restart one service
docker-compose restart app

# View logs for a specific service
docker-compose logs -f app

# View logs for all services
docker-compose logs -f
```

### Database Management
```bash
# Connect to MySQL directly
docker exec -it call-prediction-db-1 mysql -uroot -pMike2000

# Execute SQL commands
docker exec -it call-prediction-db-1 mysql -uroot -pMike2000 -e "SHOW DATABASES;"

# Import a SQL file
docker exec -i call-prediction-db-1 mysql -uroot -pMike2000 calls_prediction < your_sql_file.sql
```

### Container Shell Access
```bash
# Access app container shell
docker exec -it call-prediction-app-1 bash

# Access database container shell
docker exec -it call-prediction-db-1 bash
```

### Cleaning Up
```bash
# Remove containers but keep volumes
docker-compose down

# Remove containers and volumes
docker-compose down -v

# Remove all unused Docker resources
docker system prune
```

## Troubleshooting

### If the application can't connect to MySQL
1. Check if both containers are running:
   ```bash
   docker-compose ps
   ```

2. Check if MySQL is accessible:
   ```bash
   docker exec -it call-prediction-app-1 ping db
   ```

3. Check MySQL logs:
   ```bash
   docker-compose logs db
   ```

4. Check application logs:
   ```bash
   docker-compose logs app
   ```

### If port 3306 is already in use
This is already handled in the docker-compose.yml by mapping MySQL to port 3307 externally.

If you need to use a different port, change the port mapping in the docker-compose.yml file:
```yaml
ports:
  - "YOUR_PORT:3306"
```

### If you need to modify the database
Connect to MySQL and make your changes:
```bash
docker exec -it call-prediction-db-1 mysql -uroot -pMike2000
```

Then in the MySQL prompt:
```sql
USE calls_prediction;
-- Your SQL commands here
```

## Important Notes

1. The database data is persisted in a Docker volume named `mysql-data`.
2. The Spring Boot application connects to MySQL using the hostname `db` (the service name in docker-compose.yml).
3. For security in production, avoid using the root user and consider using stronger passwords.